@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - ClassTree</title>
    <link href="~/css/output.css" rel="stylesheet" />
    <style>
        .custom-bg {
            background-color: #1c1134; /* Egyedi háttérszín */
        }

        .custom-text {
            color: #ffffff; /* Egyedi szövegszín */
        }

        .hover-custom-bg:hover {
            background-color: #1c1134; /* Hover állapotban egyedi háttérszín */
        }

        .hover-custom-text:hover {
            color: #ffffff; /* Hover állapotban egyedi szövegszín */
        }

        .hidden {
            display: none;
        }

        .tab {
            cursor: pointer;
        }
    </style>
</head>
<body class="bg-gray-900 text-white">
    <header class="custom-bg p-4">
        <nav class="flex justify-between items-center">
            <div>
                <span class="text-xl font-bold">osztályfa</span>
                <span class="text-sm">∘∘</span>
            </div>
            <div class="flex space-x-4" id="mainCategoriesContainer">
                @await Component.InvokeAsync("CTMainCategories", new { selectedRootName = @Model.RootFolderName })
            </div>
            <div class="flex space-x-4" id="subCategoriesContainer">
                @await Component.InvokeAsync("CTSubCategories", new { selectedRootName = @Model.RootFolderName, selectedSubRootName = @Model.SubFolderName })
            </div>
            <div class="flex space-x-4">
                @if (SignInManager.IsSignedIn(User))
                {
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
                        </li>
                        <li class="nav-item">
                            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
                            </form>
                        </li>
                    </ul>
                }
                else
                {
                    <partial name="_LoginPartial" />
                }
            </div>
        </nav>
    </header>

    <main class="p-4" id="folderContainer">
        @RenderBody()
    </main>

    <!-- Modal Structure -->
    <div id="modal" class="fixed z-50 inset-0 overflow-y-auto hidden">
        <div class="flex items-center justify-center min-h-screen">
            <div class="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full">
                <div class="bg-gray-900 p-4 flex justify-between items-center">
                    <div id="tabs" class="flex space-x-4">
                        <!-- Tabs will be inserted here dynamically -->
                    </div>
                    <div>
                        <button type="button" class="text-white" onclick="minimizeModal()">-</button>
                        <button type="button" class="text-white" onclick="closeModal()">✕</button>
                    </div>
                </div>
                <div id="modalContent" class="p-4">
                    <!-- Content will be inserted here dynamically -->
                </div>
            </div>
        </div>
    </div>

    <!-- Minimized Modal Button -->
    <div id="minimizedModalButton" class="hidden fixed bottom-4 right-4">
        <button class="bg-gray-900 text-white p-2 rounded" onclick="restoreModal()">Open Modal</button>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        const openFiles = [];

        function openModal(fileContent) {
            const modal = document.getElementById('modal');
            const modalContent = document.getElementById('modalContent');
            const tabs = document.getElementById('tabs');

            const fileId = fileContent.fileId;
            const fileName = fileContent.fileName;

            // Check if the file is already open
            const existingTab = openFiles.find(file => file.id === fileId);
            if (existingTab) {
                modal.classList.remove('hidden');
                selectTab(existingTab.id);
                return;
            }

            // Create new tab and content
            openFiles.push({ id: fileId, name: fileName });
            const tab = document.createElement('div');
            tab.className = 'tab p-2 bg-gray-800 text-white rounded';
            tab.innerText = fileName;
            tab.onclick = () => selectTab(fileId);
            tabs.appendChild(tab);

            const contentDiv = document.createElement('div');
            contentDiv.id = `content-${fileId}`;
            contentDiv.className = `text-black hidden`;
            contentDiv.innerHTML = fileContent.html;
            modalContent.appendChild(contentDiv);

            // Show modal and select new tab
            modal.classList.remove('hidden');
            selectTab(fileId);
        }

        function selectTab(fileId) {
            // const modal = document.getElementById('modal');
            // if (modal.classList.contains("hidden") { 
            //     modal.classList.remove("hidden");
            // }
            const modalContent = document.getElementById('modalContent').children;
            for (let content of modalContent) {
                content.classList.add('hidden');
            }
            document.getElementById(`content-${fileId}`).classList.remove('hidden');
        }

        function closeModal() {
            openFiles.length = 0;
            const modal = document.getElementById('modal');
            modal.classList.add('hidden');
            document.getElementById('tabs').innerHTML = ''; // Kiüríti a tabokat
            document.getElementById('modalContent').innerHTML = ''; // Kiüríti a modal tartalmát
        }

        function minimizeModal() {
            const modal = document.getElementById('modal');
            const minimizedButton = document.getElementById('minimizedModalButton');
            modal.classList.add('hidden');
            minimizedButton.classList.remove('hidden');
        }

        function restoreModal() {
            const modal = document.getElementById('modal');
            const minimizedButton = document.getElementById('minimizedModalButton');
            modal.classList.remove('hidden');
            minimizedButton.classList.add('hidden');
        }

        async function fetchFileContent(fileId, fileName) {
            try {
                const response = await fetch(`/ClassTree/GetFileContent?fileId=${fileId}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.text();
                openModal({ fileId, fileName, html: data });
            } catch (error) {
                console.error('There was a problem with the fetch operation:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Add event listeners to file links
            document.querySelectorAll('.file-name').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const fileId = this.getAttribute('data-file-id');
                    const fileName = this.getAttribute('data-file-name');

                    fetchFileContent(fileId, fileName);
                });
            });
        });
    </script>
</body>
</html>
