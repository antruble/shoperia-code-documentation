@model ShoperiaDocumentation.Models.ViewModels.DatabaseViewModel

<style>
    .menu-entity:nth-child(odd) {
        background-color: white;
    }

    .menu-entity:nth-child(even) {
        background-color: rgb(209 213 219); /* bg-gray-300 */
        background-color: white;
     }
    .menu-entity:hover{
        background-color: #0D6EFD;
    }

    .highlighted {
        font-weight: bold;
        border-left: 4px solid #6366f1; 
    }

    .field-row:nth-child(even) {
        background-color: rgb(243 244 246);
    }
    
</style>

<div class="w-1/5 pt-4 flex flex-col bg-gray-200  text-md" id="database-explorer">
    
    <h1 class="flex w-full justify-center mb-4 font-bold text-gray-700 text-2xl">
        Adatbázis táblák
    </h1>
    <div class="relative pb-4 px-2">
        <input type="text"
                id="searchBar"
                placeholder="Search..."
                class="w-full py-2 px-4 rounded-md border border-gray-400 focus:outline-none focus:ring-2 focus:ring-violet-700 text-black"/>
    </div>
    <div class="flex flex-col gap-1 overflow-y-scroll px-2">
        @if (Model != null && Model.Entities != null)
        {
            @foreach (var entity in Model.Entities)
            {
            <div class="menu-entity cursor-pointer hover:bg-indigo-700 px-2 py-1 rounded"
                    data-entity-id="@entity.Id">
                @entity.Name
            </div>
            }
        }
    </div>
    <div class="flex justify-center py-2">
        <a href="@Url.Action("Index", "ClassTree")" class="hover:underline" style="color: #0D6EFD;">
            Váltás az osztályfára...
        </a>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', async () => {
        const entityMenus = document.querySelectorAll('.menu-entity');
        const entityDetails = document.getElementById('entity-data');
        let selectedEntity = null;

        // Az első entitás betöltése
        if (entityMenus.length > 0) {
            await openDatabaseEntity(entityMenus[0]);
        }

        // Események hozzárendelése az entitásokhoz
        entityMenus.forEach((entity) => {
            entity.addEventListener('click', async () => {
                await openDatabaseEntity(entity);
            });
        });

        // Funkció az entitás részleteinek betöltésére
        async function openDatabaseEntity(entity) {
            if (selectedEntity) {
                selectedEntity.classList.remove("highlighted");
            }
            // Az aktuális entitás kiemelése
            entity.classList.add("highlighted");
            selectedEntity = entity;

            const entityId = entity.getAttribute('data-entity-id'); // Az entitás ID-ja
            try {
                // AJAX hívás az entitás adataihoz
                const response = await fetch(`/database/GetEntityPartial/${entityId}`, {
                    method: 'GET',
                    headers: {
                        "Content-Type": "text/html",
                    },
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch entity details.');
                }

                const html = await response.text(); // Válasz HTML formában
                const entityDetails = document.getElementById("entity-data");

                // Az új résznézet beillesztése
                entityDetails.innerHTML = html;
            } catch (error) {
                console.error("Error fetching entity partial:", error);
                alert("An error occurred while fetching the entity details.");
            }
        }

        searchBar.addEventListener('input', () => {
            const query = searchBar.value.toLowerCase();
            entityMenus.forEach((item) => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(query) ? 'block' : 'none';
            });
        });

        // Keresés törlése
        function clearSearch() {
            const searchBar = document.getElementById('searchBar');
            searchBar.value = ''; // Mező törlése
            handleSearchInput({ target: searchBar }); // Frissítés üres szöveggel
        }
    });
</script>
